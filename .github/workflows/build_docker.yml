---
# Create a Docker Image based on a .qcow2 image
#
# To avoid yet-another-os-bootstrap, then this creates the Docker Image by
# copying the file-system content of an existing .qcow2 image by mouting it via
# guestmount (FUSE/libfuestfs) and a minimal Docker file:
#
# FROM scratch
# COPY . /
# CMD ["/bin/bash"]
#
# Technologies Used:
# - guestmount / guestunmount
# - docker build
# - cijoe
#
# The workflow delegates most of the logic to the CIJOE workflow. Refer to the
# report generated by CIJOE for a comprehensive log of executed tasks, including
# detailed descriptions of scripts and workflow steps.
#
# By relying on CIJOE for the majority of the logic, this approach:
#
# - Simplifies testing and development, as the logic can be run locally 
#   (e.g., in a lab or on a workstation/laptop).
# - Enables reusability in other CI/CD pipelines, such as GitLab.
#
# Purpose:
# 1. Prepare the input for the CIJOE workflow.
# 2. Collect artifacts produced during execution.
# 3. Upload Docker image to a container-registry
#
name: SPDK-CI build Docker image

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry -- ghcr.io'
        required: false
        default: 'false'
      distro:
        description: 'Distribution name_ver to build docker from qcow2 image'
        required: false
        default: 'fedora_42'

jobs:
  select_vm_image:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - name: Select latest qcow2 artifact
      id: get_artifact_id
      # TODO: make it a composite action for reuse
      run: |
        ARTIFACT_ID=$(gh api --paginate "/repos/${{ github.repository }}/actions/artifacts?name=vm-image-${{ inputs.distro }}_x86_64" -q '.artifacts |= sort_by(.updated_at)[-1] | .artifacts.workflow_run.id')
        echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_OUTPUT"
    outputs:
      artifact_id: ${{ steps.get_artifact_id.outputs.artifact_id }}

  build-docker:
    needs: select_vm_image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_ID: ghcr.io/${{ github.repository_owner }}/spdk-ci:${{ inputs.distro }}

    container:
      image: ghcr.io/refenv/cijoe-docker:v0.9.52
      options: >
        --device=/dev/kvm
        --device=/dev/fuse
        --cap-add=SYS_ADMIN
        --security-opt apparmor=unconfined

    concurrency:
      group: build_docker
      cancel-in-progress: false

    steps:
    - name: Checkout CI repository
      uses: actions/checkout@v4.1.7
      with:
        path: ci

    - name: Restore qcow2 image from cache
      id: restore-qcow2
      uses: actions/cache/restore@v4
      with:
        path: ${{ inputs.distro }}_x86_64.qcow2
        key: vm-image-${{ inputs.distro }}_x86_64

    - name: Download VM Qcow2 image artifact
      uses: actions/download-artifact@v4.1.8
      if: hashFiles(format('{0}_x86_64.qcow2', inputs.distro)) == ''
      with:
        name: vm-image-${{ inputs.distro }}_x86_64
        github-token: ${{ github.token }}
        run-id: ${{ needs.select_vm_image.outputs.artifact_id }}

    - name: Build
      run: |
        cd ci/cijoe
        cijoe \
        --monitor \
        --config configs/qemuhost-with-guest-${{ inputs.distro }}.toml \
        --workflow workflows/build_docker_using_qcow2.yaml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        path: ci/cijoe/cijoe-output
        name: docker_build-report

    - name: Log into GitHub Container Registry
      if: ${{ github.event.inputs.push_to_registry == 'true' }}
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push to ghcr.io
      if: ${{ github.event.inputs.push_to_registry == 'true' }}
      run: |
        docker images
        docker tag spdk-ci:${{ inputs.distro }} ${IMAGE_ID}
        docker push ${IMAGE_ID}
