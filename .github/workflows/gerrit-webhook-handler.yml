---
name: SPDK per-patch tests

on:
  pull_request:
    paths-ignore:
    - '.github/workflows/selftest.yml'
    - '.github/workflows/build_qcow2.yml'
    - 'infra/**'
  workflow_dispatch:
    inputs:
      client_payload:
        required: false
        type: string
        default: ''
  repository_dispatch:
    types:
    - per-patch-event
    - patchset-created
    - wip-state-changed
    - private-state-changed

env:
  # TODO: Renable client_payload for workflow_dispatch
  client_payload: ${{ github.event.client_payload != '' && toJson(github.event.client_payload) || '' }}

jobs:
  env_vars: # Workaround for https://github.com/actions/runner/issues/2372
    runs-on: ubuntu-latest
    outputs:
      client_payload: ${{ env.client_payload }}
    steps:
    - run: echo "Passing workflow env vars to reusable workflows"

  patch_set_status:
    needs: env_vars
    runs-on: ubuntu-latest
    if: ${{ needs.env_vars.outputs.client_payload }}
    env:
      GH_TOKEN: ${{ github.token }}
      change_num: ${{ fromJSON(needs.env_vars.outputs.client_payload).change.number }}
      patch_set: ${{ fromJSON(needs.env_vars.outputs.client_payload).patchSet.number }}
    steps:
    - name: Check patch set status
      run: |
        set -e
        set -x

        # Get latest info about a change itself
        curl -s -X GET "https://review.spdk.io/changes/spdk%2Fspdk~${{ env.change_num }}?o=DETAILED_ACCOUNTS&o=LABELS&o=SKIP_DIFFSTAT" \
        | tail -n +2 >  change.json

        if [[ ! -s change.json ]]; then
          echo "Change ${{ env.change_num }} not found, exiting."
          echo "Either it's a private change or in restricted branch."
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Do not test any change marked as WIP
        # .work_in_progress is not set when false
        work_in_progress="$(jq -r '.work_in_progress' change.json)"
        if [[ "$work_in_progress" == "true" ]]; then
          echo "Ignore. Patch is currently WIP."
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Only test latest patch set
        current_patch_set="$(jq -r '.current_revision_number' change.json)"
        if ((current_patch_set != ${{ env.patch_set }})); then
          echo "Ignore. Patch set ${{ env.patch_set }} is not the latest."
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Test only changes without a Verified vote already present
        verified=$(jq -r ".labels.Verified.all[]? | select(.username==\"${{ secrets.GERRIT_BOT_USER }}\").value" change.json)
        if ((verified != 0)); then
          echo "Ignore. Patch already has a vote from CI."
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

  common:
    if: ${{ !cancelled() }}
    needs:
    - env_vars
    - patch_set_status
    uses: ./.github/workflows/spdk-common-tests.yml
    with:
      # "Client payload" is all of the information Gerrit webhooks sends out.
      client_payload: ${{ needs.env_vars.outputs.client_payload }}
    secrets: inherit

  # Summary should be last job, please make sure to include yours in 'needs'.
  summary:
    if: ${{ !cancelled() }}
    needs:
    - env_vars
    - patch_set_status
    - common
    uses: ./.github/workflows/summary.yml
    with:
      client_payload: ${{ needs.env_vars.outputs.client_payload }}
      result: ${{ needs.common.result }}
    secrets: inherit
